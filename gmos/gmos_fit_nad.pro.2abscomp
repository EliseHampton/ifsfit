pro gmos_fit_nad,gal

;
; History
;  10jul21  DSNR  created
;

  he_rest = 5875.661d

  nabs = 2
  nem = 1
  fitran = [6100,6150]

  dx = 21
  dy = 25
  refx = 7d
  refy = 13d

  rootdir = '/Users/drupke/winds/'
  fitdir = rootdir+'gmos/specfits/'+gal+'/'
  srcdir = rootdir+'routines_fitting/gmos/'

;;   specrow = [7,7,7,7,7,7,7,7,7,7,7,15]
;;   speccol = [10,11,12,13,14,15,16,17,18,19,20,16]

; Arrays to hold flags
  donefit = dblarr(dx,dy)
  nabscomp = dblarr(dx,dy)+2

; Array of distances from reference spectrum
  rows = rebin(dindgen(dx)+1,dx,dy)
  cols = rebin(reform(dindgen(dy)+1,1,dy),dx,dy)
  dref = sqrt((rows-refx)^2d + (cols-refy)^2d)
; ... properly sorted in order of increasing distance
  dref_isrt = sort(dref)
  nspec = n_elements(rows)
  rows_srt = reform(rows(dref_isrt),nspec)
  cols_srt = reform(cols(dref_isrt),nspec)
  dref_srt = reform(dref(dref_isrt),nspec)

; Pick out spectra to fit using Weq criterion
  dofit = dblarr(dx,dy)
  readcol300,fitdir+gal+'.lines.dat',$
             row_f,col_f,comp_f,o1,o1e,ha,hae,n2,n2e,$
             nad_weq,nad_weqe,$
             /skip,/silent,format='(I,I,I,D,D,D,D,D,D,D,D)'
  ndofit=0
  for i=0,n_elements(row_f)-1 do begin
     if comp_f[i] eq 1 then begin
        if nad_weq[i] ge 3d*nad_weqe[i] then begin
           dofit[row_f[i]-1,col_f[i]-1] = 1
           ndofit++
        endif
     endif
  endfor
  dofit = reform(dofit(dref_isrt),nspec)
  idofit=1

; Fit reference spectrum

  print,'Fitting [',refx,',',refy,'].  Spec. ',idofit,' of ',ndofit,'.',$
        format='(A,I03,A,I03,A,I0,A,I0,A)'
  
  spec = string(refx,'_',refy,format='(I04,A0,I04)')
  spectot= fitdir+gal+'_'+spec
  parin  = spectot+'_nad_parin.dat'
  parout = spectot+'_nad_parout.dat'
  specin = spectot+'_nad_spec.dat'
  specout= spectot+'_nad_fit'
  xdr = spectot+'.xdr'

  restore,file=xdr
  if n_elements(struct.param) gt 1 then $
     nem_emfit = struct.param[1] $
  else $
     nem_emfit = 0
  if nem_emfit gt 0 then begin
     linepars = sepfitpars(struct.param,struct.perror)
     haind = where(struct.linelabel eq 'Halpha')
     i_hapk = 0
     if nem_emfit eq 2 then begin
        if linepars.fluxpk[haind,1] gt linepars.fluxpk[haind,0] then $
           i_hapk = 1
     endif
     he_lam = he_rest * (1d + struct.z.gas[i_hapk])
     he_b = linepars.sigma[haind,i_hapk] * sqrt(2d) / he_lam * 299792d
  endif

  openw,lun,parin,/get_lun
  printf,lun,nabs,nem,fitran[0],fitran[1],format='(I8,I8,D8.1,D8.1)'
  fparin = '(D8.2,D8.2,D8.2,I8)'
  printf,lun,0.01,0.5,1.0,1,format=fparin
  printf,lun,0.01,0.5,5.0,1,format=fparin
  printf,lun,6125,6135,6140,1,format=fparin
  printf,lun,60,400,1500,1,format=fparin
  printf,lun,0.01,0.5,1.0,1,format=fparin
  printf,lun,0.01,0.5,5.0,1,format=fparin
  printf,lun,6135,6143,6155,1,format=fparin
  printf,lun,60,200,1500,1,format=fparin
  printf,lun,0,0.1,2,1,format=fparin
  printf,lun,0,he_lam,0,0,format=fparin
  printf,lun,0,he_b,0,0,format=fparin
  free_lun,lun
  
  file_copy,srcdir+'lmfit.h',srcdir+'lmfit.h.BAK',/over
  lmfith = strarr(15)
  dummy = ''
  openr,lun,srcdir+'lmfit.h',/get_lun
  for j=0,11 do begin
     readf,lun,dummy
     lmfith[j] = dummy        
  endfor
  lmfith[12] = '#define FILE_PARI "'+parin+'"'
  lmfith[13] = '#define FILE_OUT  "'+parout+'"'
  lmfith[14] = '#define FILE_DAT  "'+specin+'"'
  free_lun,lun
  
  openw,lun,srcdir+'lmfit.h',/get_lun
  for j=0,14 do printf,lun,lmfith[j]
  free_lun,lun
     
  spawn,'gcc -o '+fitdir+'lmfit '+srcdir+'lmfit.c -I'+$
        srcdir+'/lib -lm'
  spawn,fitdir+'lmfit'

  
  gmos_plotnadfit,specin,parout,specout,struct.z
  
  donefit[refx-1,refy-1] = 1
  rows_done = [refx]
  cols_done = [refy]


; Fit rest of spectra
  
  for i=1,nspec-1 do begin

     if dofit[i] then begin

        badcomp=0
        
        print,'Fitting [',rows_srt[i],',',cols_srt[i],']',$
              format='(A,I03,A,I03,A,$)'

        spec = string(rows_srt[i],'_',cols_srt[i],$
                      format='(I04,A0,I04)')
        spectot= fitdir+gal+'_'+spec
        parin  = spectot+'_nad_parin.dat'
        parout = spectot+'_nad_parout.dat'
        specin = spectot+'_nad_spec.dat'
        specout= spectot+'_nad_fit'
        xdr = spectot+'.xdr'

;       Get emission-line parameters
        restore,file=xdr
        if n_elements(struct.param) gt 1 then $
           nem_emfit = struct.param[1] $
        else $
           nem_emfit = 0
        if nem_emfit gt 0 then begin
           linepars = sepfitpars(struct.param,struct.perror)
           haind = where(struct.linelabel eq 'Halpha')
           i_hapk = 0
           if nem_emfit eq 2 then $
              if linepars.fluxpk[haind,1] gt $
              linepars.fluxpk[haind,0] then $
                 i_hapk = 1
           he_lam = he_rest * (1d + struct.z.gas[i_hapk])
           he_b = linepars.sigma[haind,i_hapk] * sqrt(2d) / $
                  he_lam * 299792d
        endif

        if file_test(parout) then spawn,'rm '+parout

;       Find nearest spectrum that has already been fit for input
;       parameters.
        dref_new = sqrt((rows-rows_srt[i])^2d + (cols-cols_srt[i])^2d)
        dref_new_isrt   = sort(dref_new)
        dref_new_srt    = reform(dref_new[dref_new_isrt],nspec)
        donefit_new_srt = reform(donefit[dref_new_isrt],nspec)
        nabscomp_new_srt= reform(nabscomp[dref_new_isrt],nspec)
        rows_new_srt    = reform(rows[dref_new_isrt],nspec)
        cols_new_srt    = reform(cols[dref_new_isrt],nspec)
        foundnearest = 0
        j = 0
        while ~ foundnearest do begin
           if donefit_new_srt[j] eq 1 AND $
              nabscomp_new_srt[j] eq 2 then foundnearest++
           j++
        endwhile
        j--

        print,'; reference: [',rows_new_srt[j],',',cols_new_srt[j],$
              '].  Spec. ',idofit,' of ',ndofit,'.',$
              format='(A,I03,A,I03,A,I0,A,I0,A)'

;       Get output parameters from nearest fit        
        parfile_nearest = fitdir+gal+'_'+$
                          string(rows_new_srt[j],'_',cols_new_srt[j],$
                                 format='(I04,A0,I04)')+$
                          '_nad_parout.dat'

        gmos_readnadpars,parfile_nearest,abspars,empars,opars

fit:
        
        openw,lun,parin,/get_lun
        if badcomp eq 0 then $
           printf,lun,nabs,nem,fitran[0],fitran[1],$
                  format='(I8,I8,D8.1,D8.1)' $
        else $
           printf,lun,1,nem,fitran[0],fitran[1],$
                  format='(I8,I8,D8.1,D8.1)'
        fparin = '(D8.2,D8.2,D8.2,I8)'
        if badcomp ne 1 then begin
           printf,lun,0.01,abspars[0,0],1.0,1,format=fparin
           printf,lun,0.01,abspars[1,0],5.0,1,format=fparin
           printf,lun,abspars[2,0]-10d,abspars[2,0],abspars[2,0]+10d,1,$
                  format=fparin
           printf,lun,60,abspars[3,0],1500,1,format=fparin
        endif 
        if badcomp ne 2 then begin
           printf,lun,0.01,abspars[0,1],1.0,1,format=fparin
           printf,lun,0.01,abspars[1,1],5.0,1,format=fparin
           printf,lun,abspars[2,1]-10d,abspars[2,1],abspars[2,1]+10d,1,$
                  format=fparin
           printf,lun,60,abspars[3,1],1500,1,format=fparin
        endif
        printf,lun,0,empars[0,0],2,1,format=fparin
        printf,lun,0,he_lam,0,0,format=fparin
        printf,lun,0,he_b,0,0,format=fparin
        free_lun,lun

        file_copy,srcdir+'lmfit.h',srcdir+'lmfit.h.BAK',/over
        lmfith = strarr(15)
        dummy = ''
        openr,lun,srcdir+'lmfit.h',/get_lun
        for j=0,11 do begin
           readf,lun,dummy
           lmfith[j] = dummy        
        endfor
        lmfith[12] = '#define FILE_PARI "'+parin+'"'
        lmfith[13] = '#define FILE_OUT  "'+parout+'"'
        lmfith[14] = '#define FILE_DAT  "'+specin+'"'
        free_lun,lun

        openw,lun,srcdir+'lmfit.h',/get_lun
        for j=0,14 do printf,lun,lmfith[j]
        free_lun,lun
     
        spawn,'gcc -o '+fitdir+'lmfit '+srcdir+'lmfit.c -I'+$
              srcdir+'/lib -lm'
        spawn,fitdir+'lmfit'

        if file_test(parout) then begin

           if badcomp eq 0 then $
              badcomp = gmos_checknad(specin,parout,fitran) $
           else $
              badcomp = 0

           if badcomp gt 0 then begin
              print,'      Re-fitting with 1 component.'
              nabscomp[rows_srt[i]-1,cols_srt[i]-1] = 1
              goto,fit
           endif else begin
              gmos_plotnadfit,specin,parout,specout,struct.z
              donefit[rows_srt[i]-1,cols_srt[i]-1] = 1
              rows_done = [rows_done,rows_srt[i]]
              cols_done = [cols_done,cols_srt[i]]
           endelse

        endif

        idofit++

     endif

  endfor

  gmos_printnadpars,gal,rows_done,cols_done,fitdir+gal+'.nad.dat'

end
