/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "Documentation for /Users/drupke/Dropbox/git/ifsfit/";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("slitspec/cornersbox.html", "cornersbox.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "cornersbox.pro", "", "", " NAME:      cornersbox   PURPOSE:      get corners of rectangle of length l width w angle cw center xcen,ycen   EXPLANATION:   CALLING SEQUENCE    INPUTS:      l - length of rectangle (clock hand)      w - width of rectangle (perp)      ang-angle of clock hand (cw from up)      xcen - center x      ycen - center y   OUTPUT:      corners of rectangle cw from upper left corner, (e.g. when at 0 angle)      array  corners   METHOD:   REVISION HISTORY:      10Nov26  Jeff Rich created  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("slitspec/cornersbox.html#cornersbox", "cornersbox", 'routine in <a href="slitspec/cornersbox.html">cornersbox.pro</a>', "cornersbox.pro", "", "cornersbox", "", "lwangxcenycen", "          -1", "");
  
  

libdata[libdataItem++] = new Array("slitspec/cornerscircle.html", "cornerscircle.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "cornerscircle.pro", "", "", " NAME:      cornerscircle   PURPOSE:      get corners of circle of diameter d center xcen,ycen   EXPLANATION:   CALLING SEQUENCE    INPUTS:      d - diameter of circle      xcen - center x      ycen - center y   OUTPUT:      corners of rectangle cw from upper left corner, (e.g. when at 0 angle)      array  corners   METHOD:   REVISION HISTORY:      10Nov26  Jeff Rich created  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("slitspec/cornerscircle.html#cornerscircle", "cornerscircle", 'routine in <a href="slitspec/cornerscircle.html">cornerscircle.pro</a>', "cornerscircle.pro", "", "cornerscircle", "", "dxcenycen", "          -1", "");
  
  

libdata[libdataItem++] = new Array("slitspec/getfiber1.html", "getfiber1.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "getfiber1.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("slitspec/getslit1.html", "getslit1.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "getslit1.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("common/ifsf_addpoly2temp.html", "ifsf_addpoly2temp.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "ifsf_addpoly2temp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/ifsf_addpoly2temp.html#ifsf_addpoly2temp", "ifsf_addpoly2temp", 'routine in <a href="common/ifsf_addpoly2temp.html">ifsf_addpoly2temp.pro</a>', "ifsf_addpoly2temp.pro", "    David S. N. Rupke: <span class= code-output > Rhodes College</span> <span class= code-output > Department of Physics</span> <span class= code-output > 2000 N. Parkway</span> <span class= code-output > Memphis, TN 38104</span> <span class= code-output > drupke@gmail.com</span>  ", "ifsf_addpoly2temp", " Add smooth functions to stellar continuum templates for spectral  fitting: polynomials of form x^i (i.e., 1, x, x^2, etc.), their  array reversals in wavelength space (i.e., reverse(x), etc.), and  optionally 8 exponentials (of form +/-e^-x, +/-e^-2x, +/-e^-4x,  +/-e^-8x).   ", "nterms      Use to prevent detailed output to screen. Default is to print       detailed output.  addexp      Set to add 8 exponential terms.   template      Stellar continuum templates for continuum fitting, with N       pixels and M templates.   ", "IFSFIT", "    ChangeHistory: <span class= code-output > 2009, DSNR, copied base code from Harus Jabran Zahid</span> <span class= code-output > 2010apr13, DSNR, added exponentials</span> <span class= code-output > 2013oct, DSNR, renamed, added documentation, added</span> <span class= code-output >                reverse-ordered x^i terms</span> <span class= code-output > 2013nov11, DSNR, renamed, added license and copyright</span>      Copyright (C) 2013 David S. N. Rupke      This program is free software: you can redistribute it and/or     modify it under the terms of the GNU General Public License as     published by the Free Software Foundation, either version 3 of     the License or any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU     General Public License for more details.      You should have received a copy of the GNU General Public License     along with this program.  If not, see     http://www.gnu.org/licenses/.       Array of continuum fitting templates, of type=dblarr(N,M'), with     N pixels and M' templates. M' is the number of original templates     plus NTERMS polynomials and 8 exponentials (i.e., M' = M + NTERMS     + 8).   ");
  
  

libdata[libdataItem++] = new Array("lris/lris_anl_spectra.html", "lris_anl_spectra.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_anl_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_anl_spectra.html#lris_anl_spectra", "lris_anl_spectra", 'routine in <a href="lris/lris_anl_spectra.html">lris_anl_spectra.pro</a>', "lris_anl_spectra.pro", "", "lris_anl_spectra", " NAME:      LRIS_ANL_SPECTRA   PURPOSE:      Wrapper script for analyzing fitted LRIS spectra.   EXPLANATION:   CALLING SEQUENCE      lris_anl_spectra,mask,slitrange=,aprange=,/dobcor,/showplot   INPUTS:      mask - String name of mask, as specified in LRIS_INITFIT_SPECTRA      slitrange - scalar or two-element array specifying range of slits to fit      aprange - scalar or two-element array specifying range of apertures to fit      nobcor - do not correct blue line fluxes based on Balmer lines      showplot - display to screen each fit as it is plotted   INPUT:      A binary (.genx) file containing the results of the fit.   OUTPUT:      JPG plots of stellar, emission-line, and continuum fits, and data files      summarizing outputs.   METHOD:   REVISION HISTORY:      09may13  David Rupke  created      09jun07  David Rupke  added multiple components  ", "slitrangeaprangenobcorshowplotpostscriptlabmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_chkbalmlines.html", "lris_chkbalmlines.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_chkbalmlines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_chkbalmlines.html#lris_chkbalmlines", "lris_chkbalmlines", 'routine in <a href="lris/lris_chkbalmlines.html">lris_chkbalmlines.pro</a>', "lris_chkbalmlines.pro", "", "lris_chkbalmlines", "", "rvebmvfluxes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_anl_spectra.html", "lris_feb09_anl_spectra.pro", '.pro file in <a href="lris_feb09/dir-overview.html">lris_feb09/ directory</a>', "lris_feb09_anl_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_anl_spectra.html#lris_feb09_anl_spectra", "lris_feb09_anl_spectra", 'routine in <a href="lris_feb09/lris_feb09_anl_spectra.html">lris_feb09_anl_spectra.pro</a>', "lris_feb09_anl_spectra.pro", "", "lris_feb09_anl_spectra", " NAME:      LRIS_FEB09_ANL_SPECTRA   PURPOSE:      Wrapper script for analyzing fitted LRIS spectra.   EXPLANATION:   CALLING SEQUENCE      lris_anl_spectra,mask,slitrange=,aprange=,/dobcor,/showplot   INPUTS:      mask - String name of mask, as specified in LRIS_INITFIT_SPECTRA      slitrange - scalar or two-element array specifying                  range of slits to fit      aprange - scalar or two-element array specifying                range of apertures to fit      nobcor - do not correct blue line fluxes based on Balmer lines      showplot - display to screen each fit as it is plotted   INPUT:      A binary (.genx) file containing the results of the fit.   OUTPUT:      JPG plots of stellar, emission-line, and continuum fits, and      data files summarizing outputs.   METHOD:   REVISION HISTORY:      09may13  David Rupke  created      09jun07  DSNR         added multiple components      10apr21  DSNR         converted to observed-frame fits  ", "slitrangeaprangenobcorshowplotlabmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_fit_spectra.html", "lris_feb09_fit_spectra.pro", '.pro file in <a href="lris_feb09/dir-overview.html">lris_feb09/ directory</a>', "lris_feb09_fit_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_fit_spectra.html#lris_feb09_fit_spectra", "lris_feb09_fit_spectra", 'routine in <a href="lris_feb09/lris_feb09_fit_spectra.html">lris_feb09_fit_spectra.pro</a>', "lris_feb09_fit_spectra.pro", "", "lris_feb09_fit_spectra", "", "slitrangeaprangetimeverboselabmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_initfit_spectra.html", "lris_feb09_initfit_spectra.pro", '.pro file in <a href="lris_feb09/dir-overview.html">lris_feb09/ directory</a>', "lris_feb09_initfit_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_initfit_spectra.html#lris_feb09_initfit_spectra", "lris_feb09_initfit_spectra", 'routine in <a href="lris_feb09/lris_feb09_initfit_spectra.html">lris_feb09_initfit_spectra.pro</a>', "lris_feb09_initfit_spectra.pro", "", "lris_feb09_initfit_spectra", "", "labmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_initparinfo.html", "lris_feb09_initparinfo.pro", '.pro file in <a href="lris_feb09/dir-overview.html">lris_feb09/ directory</a>', "lris_feb09_initparinfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_initparinfo.html#lris_feb09_initparinfo", "lris_feb09_initparinfo", 'routine in <a href="lris_feb09/lris_feb09_initparinfo.html">lris_feb09_initparinfo.pro</a>', "lris_feb09_initparinfo.pro", "", "lris_feb09_initparinfo", "", "stitchwavezfixfloatcompinitbcompinitrcomplinenamelinelambdalinelambdazinitfluxinitsigz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_manygauss.html", "lris_feb09_manygauss.pro", '.pro file in <a href="lris_feb09/dir-overview.html">lris_feb09/ directory</a>', "lris_feb09_manygauss.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_manygauss.html#lris_feb09_manygauss", "lris_feb09_manygauss", 'routine in <a href="lris_feb09/lris_feb09_manygauss.html">lris_feb09_manygauss.pro</a>', "lris_feb09_manygauss.pro", "", "lris_feb09_manygauss", "", "floatcompstitchwavewaveparam", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_sepfitpars.html", "lris_feb09_sepfitpars.pro", '.pro file in <a href="lris_feb09/dir-overview.html">lris_feb09/ directory</a>', "lris_feb09_sepfitpars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris_feb09/lris_feb09_sepfitpars.html#lris_feb09_sepfitpars", "lris_feb09_sepfitpars", 'routine in <a href="lris_feb09/lris_feb09_sepfitpars.html">lris_feb09_sepfitpars.pro</a>', "lris_feb09_sepfitpars.pro", "", "lris_feb09_sepfitpars", "", "waveranfluxpkerrparamperrorstitchwave", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_fit_continuum.html", "lris_fit_continuum.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_fit_continuum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_fit_continuum.html#lris_fit_continuum", "lris_fit_continuum", 'routine in <a href="lris/lris_fit_continuum.html">lris_fit_continuum.pro</a>', "lris_fit_continuum.pro", "", "lris_fit_continuum", " NAME:      LRIS_FIT_CONTINUUM   PURPOSE:      Fit stellar continuum to LRIS data.   EXPLANATION:   CALLING SEQUENCE      lris_fit_continuum,lambda,flux,err,weight,template_flux,index,\no_dust,                         \quiet   INPUTS:      lambda - wavelength array      flux - flux array      weight - inverse variance array      template_flux - flux array for stellar templates      index - array of indices containing continuum regions to fit      no_dust - select this to turn off fitting dust extinction to stellar cont.      quiet - select this to suppress verbose fitting output      stitchwave - wavelength at which LRIS blue / red modules were stitched   OUTPUT:      The stellar continuum model   METHOD:   REVISION HISTORY:      09aug14  DSNR  created      09sep03  DSNR  changed red lower limit from 5800 to stitchwave+200      09dec11  DSNR  fixed bug in call to ibackfit: invar->invvar      10jan12  DSNR  changed red lower limit to stitchwave+100                     changed index_allred to index_red in fitting of                       red data  ", "no_dustquietstitchwaveredordlambdafluxweighttemplate_fluxindexct_coeff", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_fit_spectra.html", "lris_fit_spectra.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_fit_spectra.pro", "", "", " NAME:      LRIS_FIT_SPECTRA   PURPOSE:      Wrapper script for fitting LRIS spectra.   EXPLANATION:   CALLING SEQUENCE      lris_fit_spectra,mask,slitrange=,aprange=,/time,/verbose,/onecomp   INPUTS:      mask - String name of mask, as specified in LRIS_INITFIT_SPECTRA      slitrange - scalar or two-element array specifying range of slits to fit      aprange - scalar or two-element array specifying range of apertures to fit      time - selects timing of continuum and line fits for each spectrum      verbose - selects verbose output from fitting procedures      onecomp - fit only a single component to each spectrum   OUTPUT:      A binary (.genx) file containing the results of the fit.   METHOD:   REVISION HISTORY:      09may13  David Rupke  created      09jun07  David Rupke  added multiple components      10jan28  DSNR         re-written to fit in observed frame   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_fit_spectra.html#lris_fit_spectra", "lris_fit_spectra", 'routine in <a href="lris/lris_fit_spectra.html">lris_fit_spectra.pro</a>', "lris_fit_spectra.pro", "", "lris_fit_spectra", "", "slitrangeaprangetimeverboseonecomplabmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_fluxerrors.html", "lris_fluxerrors.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_fluxerrors.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_fluxerrors.html#lris_fluxerrors", "lris_fluxerrors", 'routine in <a href="lris/lris_fluxerrors.html">lris_fluxerrors.pro</a>', "lris_fluxerrors.pro", "", "lris_fluxerrors", "", "instr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_initfit_spectra.html", "lris_initfit_spectra.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_initfit_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_initfit_spectra.html#lris_initfit_spectra", "lris_initfit_spectra", 'routine in <a href="lris/lris_initfit_spectra.html">lris_initfit_spectra.pro</a>', "lris_initfit_spectra.pro", "", "lris_initfit_spectra", "", "labmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_initlinelist.html", "lris_initlinelist.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_initlinelist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_initlinelist.html#lris_initlinelist", "lris_initlinelist", 'routine in <a href="lris/lris_initlinelist.html">lris_initlinelist.pro</a>', "lris_initlinelist.pro", "", "lris_initlinelist", "", "strong", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_initparinfo.html", "lris_initparinfo.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_initparinfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_initparinfo.html#lris_initparinfo", "lris_initparinfo", 'routine in <a href="lris/lris_initparinfo.html">lris_initparinfo.pro</a>', "lris_initparinfo.pro", "", "lris_initparinfo", "", "stitchwavezfixlinenamelinelambdalinelambdazinitfluxinitsigz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_orderlines.html", "lris_orderlines.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_orderlines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_orderlines.html#lris_orderlines", "lris_orderlines", 'routine in <a href="lris/lris_orderlines.html">lris_orderlines.pro</a>', "lris_orderlines.pro", "", "lris_orderlines", "", "struct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_printlinepars.html", "lris_printlinepars.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_printlinepars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_printlinepars.html#lris_printlinepars", "lris_printlinepars", 'routine in <a href="lris/lris_printlinepars.html">lris_printlinepars.pro</a>', "lris_printlinepars.pro", "", "lris_printlinepars", "", "appendwhichlinesinitnobcorzerofluxlinesfluxesfluxerrorsoutfilespeclabel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_redshift_spec.html", "lris_redshift_spec.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_redshift_spec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_redshift_spec.html#lris_redshift_spec", "lris_redshift_spec", 'routine in <a href="lris/lris_redshift_spec.html">lris_redshift_spec.pro</a>', "lris_redshift_spec.pro", "", "lris_redshift_spec", "", "stitchwavegasicomplambdaz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lris/lris_updatez.html", "lris_updatez.pro", '.pro file in <a href="lris/dir-overview.html">lris/ directory</a>', "lris_updatez.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lris/lris_updatez.html#lris_updatez", "lris_updatez", 'routine in <a href="lris/lris_updatez.html">lris_updatez.pro</a>', "lris_updatez.pro", "", "lris_updatez", "", "paramz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_anl_spectra.html", "lrisbr_anl_spectra.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_anl_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_anl_spectra.html#lrisbr_anl_spectra", "lrisbr_anl_spectra", 'routine in <a href="lrisbr/lrisbr_anl_spectra.html">lrisbr_anl_spectra.pro</a>', "lrisbr_anl_spectra.pro", "", "lrisbr_anl_spectra", " NAME:      LRISBR_ANL_SPECTRA   PURPOSE:      Wrapper script for analyzing fitted LRIS spectra.   EXPLANATION:   CALLING SEQUENCE      lrisbr_anl_spectra,mask,slitrange=,aprange=,/dobcor,/showplot   INPUTS:      mask - String name of mask, as specified in LRIS_INITFIT_SPECTRA      slitrange - scalar or two-element array specifying range of slits to fit      aprange - scalar or two-element array specifying range of apertures to fit      nobcor - do not correct blue line fluxes based on Balmer lines      showplot - display to screen each fit as it is plotted   INPUT:      A binary (.genx) file containing the results of the fit.   OUTPUT:      JPG plots of stellar, emission-line, and continuum fits, and data files      summarizing outputs.   METHOD:   REVISION HISTORY:      09may13  David Rupke  created      09jun07  David Rupke  added multiple components  ", "slitrangeaprangenobcorshowplotlabmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_fit_redcont.html", "lrisbr_fit_redcont.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_fit_redcont.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_fit_redcont.html#lrisbr_fit_redcont", "lrisbr_fit_redcont", 'routine in <a href="lrisbr/lrisbr_fit_redcont.html">lrisbr_fit_redcont.pro</a>', "lrisbr_fit_redcont.pro", "", "lrisbr_fit_redcont", " History   10mar19  DSNR  created  ", "no_dustquietorderctBcoefflambdafluxweighttemplate_fluxindexct_coeff", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_fit_spectra.html", "lrisbr_fit_spectra.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_fit_spectra.pro", "", "", " NAME:      LRISBR_FIT_SPECTRA   PURPOSE:      Wrapper script for fitting LRIS spectra.   EXPLANATION:   CALLING SEQUENCE      lrisbr_fit_spectra,mask,slitrange=,aprange=,/time,/verbose   INPUTS:      mask - String name of mask, as specified in LRISBR_INITFIT_SPECTRA      slitrange - scalar or two-element array specifying range of slits to fit      aprange - scalar or two-element array specifying range of apertures to fit      time - selects timing of continuum and line fits for each spectrum      verbose - selects verbose output from fitting procedures   OUTPUT:      A binary (.genx) file containing the results of the fit.   METHOD:   REVISION HISTORY:      10mar18  David Rupke  created   ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_fit_spectra.html#lrisbr_fit_spectra", "lrisbr_fit_spectra", 'routine in <a href="lrisbr/lrisbr_fit_spectra.html">lrisbr_fit_spectra.pro</a>', "lrisbr_fit_spectra.pro", "", "lrisbr_fit_spectra", "", "slitrangeaprangetimeverboselabmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_initfit_spectra.html", "lrisbr_initfit_spectra.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_initfit_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_initfit_spectra.html#lrisbr_initfit_spectra", "lrisbr_initfit_spectra", 'routine in <a href="lrisbr/lrisbr_initfit_spectra.html">lrisbr_initfit_spectra.pro</a>', "lrisbr_initfit_spectra.pro", "", "lrisbr_initfit_spectra", "", "labmask", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_initparinfo.html", "lrisbr_initparinfo.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_initparinfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_initparinfo.html#lrisbr_initparinfo", "lrisbr_initparinfo", 'routine in <a href="lrisbr/lrisbr_initparinfo.html">lrisbr_initparinfo.pro</a>', "lrisbr_initparinfo.pro", "", "lrisbr_initparinfo", "", "tielambdazfixblueredfloatcomplinenamelinelambdalinelambdazinitfluxinitsigz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_manygauss.html", "lrisbr_manygauss.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_manygauss.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_manygauss.html#lrisbr_manygauss", "lrisbr_manygauss", 'routine in <a href="lrisbr/lrisbr_manygauss.html">lrisbr_manygauss.pro</a>', "lrisbr_manygauss.pro", "", "lrisbr_manygauss", "", "floatcompwaveparam", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_printlinepars.html", "lrisbr_printlinepars.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_printlinepars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_printlinepars.html#lrisbr_printlinepars", "lrisbr_printlinepars", 'routine in <a href="lrisbr/lrisbr_printlinepars.html">lrisbr_printlinepars.pro</a>', "lrisbr_printlinepars.pro", "", "lrisbr_printlinepars", " History   10mar19  DSNR  created  ", "appendwhichlinesinitnobcorlinesfluxesBfluxerrorsBfluxesRfluxerrorsRoutfilespeclabel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_redshift_spec.html", "lrisbr_redshift_spec.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_redshift_spec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_redshift_spec.html#lrisbr_redshift_spec", "lrisbr_redshift_spec", 'routine in <a href="lrisbr/lrisbr_redshift_spec.html">lrisbr_redshift_spec.pro</a>', "lrisbr_redshift_spec.pro", "", "lrisbr_redshift_spec", "", "blueredgasicomplambdaz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("lrisbr/lrisbr_updatez.html", "lrisbr_updatez.pro", '.pro file in <a href="lrisbr/dir-overview.html">lrisbr/ directory</a>', "lrisbr_updatez.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("lrisbr/lrisbr_updatez.html#lrisbr_updatez", "lrisbr_updatez", 'routine in <a href="lrisbr/lrisbr_updatez.html">lrisbr_updatez.pro</a>', "lrisbr_updatez.pro", "", "lrisbr_updatez", "", "paramzbluered", "          -1", "");
  
  

libdata[libdataItem++] = new Array("slitspec/makeslits.html", "makeslits.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "makeslits.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("nirifs/nifs_anl_spectra.html", "nifs_anl_spectra.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_anl_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_anl_spectra.html#nifs_anl_spectra", "nifs_anl_spectra", 'routine in <a href="nirifs/nifs_anl_spectra.html">nifs_anl_spectra.pro</a>', "nifs_anl_spectra.pro", "", "nifs_anl_spectra", "", "colsrowsnoplotsverbosegalbin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_checkcomp.html", "nifs_checkcomp.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_checkcomp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_checkcomp.html#nifs_checkcomp", "nifs_checkcomp", 'routine in <a href="nirifs/nifs_checkcomp.html">nifs_checkcomp.pro</a>', "nifs_checkcomp.pro", "", "nifs_checkcomp", "", "dblsigh2singsigh2paasigsiglimdoublelineuse_h2_10_s2structz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_fit_flat_continuum.html", "nifs_fit_flat_continuum.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_fit_flat_continuum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_fit_flat_continuum.html#nifs_fit_flat_continuum", "nifs_fit_flat_continuum", 'routine in <a href="nirifs/nifs_fit_flat_continuum.html">nifs_fit_flat_continuum.pro</a>', "nifs_fit_flat_continuum.pro", "", "nifs_fit_flat_continuum", "", "cfitranfitordno_dustquietzfitblrnorefitlambdafluxweighttemplate_fluxindexct_coeff", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_fit_qso_continuum.html", "nifs_fit_qso_continuum.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_fit_qso_continuum.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_fit_qso_continuum.html#nifs_fit_qso_continuum", "nifs_fit_qso_continuum", 'routine in <a href="nirifs/nifs_fit_qso_continuum.html">nifs_fit_qso_continuum.pro</a>', "nifs_fit_qso_continuum.pro", "", "nifs_fit_qso_continuum", "", "fitordqsotmpqsoordzexptermsno_dustquietqsoonlylambdafluxweighttemplate_fluxindexct_coeff", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_fit_spectra.html", "nifs_fit_spectra.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_fit_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_fit_spectra.html#nifs_fit_spectra", "nifs_fit_spectra", 'routine in <a href="nirifs/nifs_fit_spectra.html">nifs_fit_spectra.pro</a>', "nifs_fit_spectra.pro", "", "nifs_fit_spectra", "", "timeverbosecolsrowscpassgalbin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_initcpass.html", "nifs_initcpass.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_initcpass.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_initcpass.html#nifs_initcpass", "nifs_initcpass", 'routine in <a href="nirifs/nifs_initcpass.html">nifs_initcpass.pro</a>', "nifs_initcpass.pro", "", "nifs_initcpass", "", "gal", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_initfit_spectra.html", "nifs_initfit_spectra.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_initfit_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_initfit_spectra.html#nifs_initfit_spectra", "nifs_initfit_spectra", 'routine in <a href="nirifs/nifs_initfit_spectra.html">nifs_initfit_spectra.pro</a>', "nifs_initfit_spectra.pro", "", "nifs_initfit_spectra", "", "cpassgalbin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_initlinelist.html", "nifs_initlinelist.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_initlinelist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_initlinelist.html#nifs_initlinelist", "nifs_initlinelist", 'routine in <a href="nirifs/nifs_initlinelist.html">nifs_initlinelist.pro</a>', "nifs_initlinelist.pro", "", "nifs_initlinelist", "", "brehei187hei206si6h2s4h2s5", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_initparinfo.html", "nifs_initparinfo.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_initparinfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_initparinfo.html#nifs_initparinfo", "nifs_initparinfo", 'routine in <a href="nirifs/nifs_initparinfo.html">nifs_initparinfo.pro</a>', "nifs_initparinfo.pro", "", "nifs_initparinfo", "", "siglimzfixsigfixdoublelinelinenamelinelambdalinelambdazinitfluxinitsigz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_orderlines.html", "nifs_orderlines.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_orderlines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_orderlines.html#nifs_orderlines", "nifs_orderlines", 'routine in <a href="nirifs/nifs_orderlines.html">nifs_orderlines.pro</a>', "nifs_orderlines.pro", "", "nifs_orderlines", "", "doublelinestruct", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_plotqsofit.html", "nifs_plotqsofit.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_plotqsofit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_plotqsofit.html#nifs_plotqsofit", "nifs_plotqsofit", 'routine in <a href="nirifs/nifs_plotqsofit.html">nifs_plotqsofit.pro</a>', "nifs_plotqsofit.pro", "", "nifs_plotqsofit", "", "pszbufqsocntargsinstroutfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_plotstronglines.html", "nifs_plotstronglines.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_plotstronglines.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_plotstronglines.html#componeline", "componeline", 'routine in <a href="nirifs/nifs_plotstronglines.html">nifs_plotstronglines.pro</a>', "nifs_plotstronglines.pro", "", "componeline", "", "velsiginstrlinecomp", "          -1", "");
  
  libdata[libdataItem++] = new Array("nirifs/nifs_plotstronglines.html#nifs_plotstronglines", "nifs_plotstronglines", 'routine in <a href="nirifs/nifs_plotstronglines.html">nifs_plotstronglines.pro</a>', "nifs_plotstronglines.pro", "", "nifs_plotstronglines", "", "pszbufcompplotilinesvelsiginstroutfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_printlinepars.html", "nifs_printlinepars.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_printlinepars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_printlinepars.html#nifs_printlinepars", "nifs_printlinepars", 'routine in <a href="nirifs/nifs_printlinepars.html">nifs_printlinepars.pro</a>', "nifs_printlinepars.pro", "", "nifs_printlinepars", "", "appendwhichlinesinitdoublelinelinesfluxesfluxerrorsoutfilecolrow", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_qso_cnt_fcn.html", "nifs_qso_cnt_fcn.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_qso_cnt_fcn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_qso_cnt_fcn.html#nifs_qso_cnt_fcn", "nifs_qso_cnt_fcn", 'routine in <a href="nirifs/nifs_qso_cnt_fcn.html">nifs_qso_cnt_fcn.pro</a>', "nifs_qso_cnt_fcn.pro", "", "nifs_qso_cnt_fcn", "", "fitordqsofluxqsoordqsoonlyexptermsxpymod", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_redshift_spec.html", "nifs_redshift_spec.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_redshift_spec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_redshift_spec.html#nifs_redshift_spec", "nifs_redshift_spec", 'routine in <a href="nirifs/nifs_redshift_spec.html">nifs_redshift_spec.pro</a>', "nifs_redshift_spec.pro", "", "nifs_redshift_spec", "", "gasicomplambdaz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("nirifs/nifs_updatez.html", "nifs_updatez.pro", '.pro file in <a href="nirifs/dir-overview.html">nirifs/ directory</a>', "nifs_updatez.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("nirifs/nifs_updatez.html#nifs_updatez", "nifs_updatez", 'routine in <a href="nirifs/nifs_updatez.html">nifs_updatez.pro</a>', "nifs_updatez.pro", "", "nifs_updatez", "", "paramz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("slitspec/overlap.html", "overlap.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "overlap.pro", "", "", " NAME:      overlap   PURPOSE:      generate list of overlapping grid spaxels & percent overlap      given a particular box with corners  EXPLANATION:   CALLING SEQUENCE    INPUTS:      ;cube - cube for overlap;assuming 1 arcsec square grid      corners - corners of slit formated from cornersbox.pro    OUTPUT:      list of spaxels & cooresponding overlap percentage/weight      list[0,*] = [x,y,percent]  METHOD:   REVISION HISTORY:      10Nov26  Jeff Rich created  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("slitspec/overlap.html#overlap", "overlap", 'routine in <a href="slitspec/overlap.html">overlap.pro</a>', "overlap.pro", "", "overlap", "", "corners", "          -1", "");
  
  

libdata[libdataItem++] = new Array("slitspec/slitcens.html", "slitcens.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "slitcens.pro", "", "", " NAME:      slitcens   PURPOSE:     Part of script for generating pseudo-images from ifu cubes     Given a cube, slit element length, PA, xcen and ycen     Generates an array of x & y values for centers of     slit elements   EXPLANATION:   CALLING SEQUENCE    INPUTS:      cube - WiFeS data cube      d - slit element length      ang-slit angle clockwise from up (w of n if PA=0)      xcen      ycen   OUTPUT:      array of slit center locations   METHOD:   REVISION HISTORY:      10Nov25  Jeff Rich created  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("slitspec/slitcens.html#slitcens", "slitcens", 'routine in <a href="slitspec/slitcens.html">slitcens.pro</a>', "slitcens.pro", "", "slitcens", "", "cubedangxcenycen", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_anl_spectra.html", "sp1_anl_spectra.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_anl_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_anl_spectra.html#sp1_anl_spectra", "sp1_anl_spectra", 'routine in <a href="sp1/sp1_anl_spectra.html">sp1_anl_spectra.pro</a>', "sp1_anl_spectra.pro", "", "sp1_anl_spectra", "", "initfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_fit_spectra.html", "sp1_fit_spectra.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_fit_spectra.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_fit_spectra.html#sp1_fit_spectra", "sp1_fit_spectra", 'routine in <a href="sp1/sp1_fit_spectra.html">sp1_fit_spectra.pro</a>', "sp1_fit_spectra.pro", "", "sp1_fit_spectra", "", "timeverboseinitfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_initfit.html", "sp1_initfit.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_initfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_initfit.html#sp1init", "sp1init", 'routine in <a href="sp1/sp1_initfit.html">sp1_initfit.pro</a>', "sp1_initfit.pro", "", "sp1init", "", "masksigdataoutimlocfilezusecaredshifteqwidthharatio", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_initlinelist.html", "sp1_initlinelist.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_initlinelist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_initlinelist.html#sp1_initlinelist", "sp1_initlinelist", 'routine in <a href="sp1/sp1_initlinelist.html">sp1_initlinelist.pro</a>', "sp1_initlinelist.pro", "", "sp1_initlinelist", "", "strongvacuumquiet", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_initparinfo.html", "sp1_initparinfo.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_initparinfo.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_initparinfo.html#sp1_initparinfo", "sp1_initparinfo", 'routine in <a href="sp1/sp1_initparinfo.html">sp1_initparinfo.pro</a>', "sp1_initparinfo.pro", "", "sp1_initparinfo", "", "zerolinessigmaspecresspecrthreshlinenamelinelambdalinelambdazinitfluxinitsigz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_plotline.html", "sp1_plotline.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_plotline.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_plotline.html#componeline", "componeline", 'routine in <a href="sp1/sp1_plotline.html">sp1_plotline.pro</a>', "sp1_plotline.pro", "", "componeline", "", "velsiginstrlinecomp", "          -1", "");
  
  libdata[libdataItem++] = new Array("sp1/sp1_plotline.html#sp1_plotline", "sp1_plotline", 'routine in <a href="sp1/sp1_plotline.html">sp1_plotline.pro</a>', "sp1_plotline.pro", "", "sp1_plotline", "", "pscompwoffcfocinitfilelinelab", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_printlinepars.html", "sp1_printlinepars.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_printlinepars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_printlinepars.html#sp1_printlinepars", "sp1_printlinepars", 'routine in <a href="sp1/sp1_printlinepars.html">sp1_printlinepars.pro</a>', "sp1_printlinepars.pro", "", "sp1_printlinepars", "", "appendwhichlinesinitlinesfluxesfluxerrorsoutfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_redshift_spec.html", "sp1_redshift_spec.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_redshift_spec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_redshift_spec.html#sp1_redshift_spec", "sp1_redshift_spec", 'routine in <a href="sp1/sp1_redshift_spec.html">sp1_redshift_spec.pro</a>', "sp1_redshift_spec.pro", "", "sp1_redshift_spec", "", "gasicomplambdaz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("sp1/sp1_updatez.html", "sp1_updatez.pro", '.pro file in <a href="sp1/dir-overview.html">sp1/ directory</a>', "sp1_updatez.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("sp1/sp1_updatez.html#sp1_updatez", "sp1_updatez", 'routine in <a href="sp1/sp1_updatez.html">sp1_updatez.pro</a>', "sp1_updatez.pro", "", "sp1_updatez", "", "paramz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("slitspec/testslits.html", "testslits.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "testslits.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("slitspec/testslits2.html", "testslits2.pro", '.pro file in <a href="slitspec/dir-overview.html">slitspec/ directory</a>', "testslits2.pro", "", "", "", "", "          -1", "");
  

libdata[libdataItem++] = new Array("common/uhsf_cmplin.html", "uhsf_cmplin.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_cmplin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_cmplin.html#uhsf_cmplin", "uhsf_cmplin", 'routine in <a href="common/uhsf_cmplin.html">uhsf_cmplin.pro</a>', "uhsf_cmplin.pro", "    David Rupke   ", "uhsf_cmplin", " Compute emission line profile of a given line and velocity  component.   ", "velsig      Set if line sigma in PARAM array is in velocity space (km/s).   instr      Contains parameters of line profile. Required tags are PARAM,       which is an array of best fit line parameters output from MPFIT;       LINELABEL, which is an array of line labels; and WAVE, which is       the wavelength array of the full spectrum.  line      Name of line for which to compute profile.  comp      Number of velocity component for which to compute line profile.   ", "UHSPECFIT", "    ChangeHistory: <span class= code-output > 2013sep12  DSNR  made into stand-alone routine</span> <span class= code-output > 2013oct09, DSNR, added documentation</span>      Array of fluxes representing emission line profile.   ");
  
  

libdata[libdataItem++] = new Array("common/uhsf_disptemp.html", "uhsf_disptemp.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_disptemp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_disptemp.html#uhsf_disptemp", "uhsf_disptemp", 'routine in <a href="common/uhsf_disptemp.html">uhsf_disptemp.pro</a>', "uhsf_disptemp.pro", "    David Rupke   ", "uhsf_disptemp", " Convolve stellar templates with a Gaussian in wavelength space. To  work properly,   ", "loglam      Set to do convolution in velocity, or log(lambda), space.   template      Stellar continuum templates for continuum fitting, with N       pixels and M templates. The template must have constant       dispersion in wavelength space (default) or velocity space (if       LOGLAM set).  lambda      Wavelengths  sigma      Sigma, in velocity velocity, of Gaussian to use in convolution.   ", "UHSPECFIT", "    ChangeHistory: <span class= code-output > 2009nov24  DSNR  added log(lam) treatment</span> <span class= code-output > 2013oct10, DSNR, added documentation</span>      Convolved templates.   ");
  
  

libdata[libdataItem++] = new Array("common/uhsf_fitcont.html", "uhsf_fitcont.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_fitcont.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_fitcont.html#uhsf_fitcont", "uhsf_fitcont", 'routine in <a href="common/uhsf_fitcont.html">uhsf_fitcont.pro</a>', "uhsf_fitcont.pro", "    David Rupke   ", "uhsf_fitcont", " Function to fit continuum to spectrum. Options to fit are:    1) fit continuum w/ templates, w/ poly. renormalization of both       continuum and data    2) fit continuum w/ templates, w/o poly renormalization (select       /nopoly)    3) fit continuum w/ polynomial (select /nobvls)    4) create template-based continuum using ct_coeff and renormalize       w/ poly. (select /nobvls and /ctinput)    5) create template-based continuum using ct_coeff and do not       renormalize w/ poly. (select /nobvls, /ctinput, and /nopoly)   ", "ctinput      Use ct_coeff as an input to reproduce the specified       template-based continuum.  dust      Turn on fitting dust extinction of stellar cont.  fitord      Specifies order of polynomial renormalization (default = 3).  nobvls      Turns off stellar template fitting.  nopoly      Turns off polynomial renormalization.  quietrefit      If set, contains structure with array of continuum regions to       re-fit [tag RAN, type=dblarr(2, X), where X is the number of       regions to refit] and array of polynomial orders to fit [tag       ORD, type=intarr(X)].   lambdafluxweighttemplate_flux      M is # of templates  index      Contains indices of continuum regions to fit  ct_coeff      Coefficients used to combine stellar templates. If /nobvls is       set, then the input value is used to compute the continuum. If       not, then the best fit coefficients are output to this       variable. Set to 0 if /nobvls is set and /nopoly is not.   addnorm", "UHSPECFIT", "    Change History: <span class= code-output > 2009aug14, DSNR, created</span> <span class= code-output > 2009dec11, DSNR, fixed bug in call to ibackfit: invar-&gt;invvar</span> <span class= code-output > 2010mar18, DSNR, added ct_coeff output</span> <span class= code-output > 2013oct, DSNR, complete re-write of software</span>      The best fit continuum spectrum (over all wavelengths, not just     those fit).   ");
  
  

libdata[libdataItem++] = new Array("common/uhsf_fitspec.html", "uhsf_fitspec.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_fitspec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_fitspec.html#uhsf_fitspec", "uhsf_fitspec", 'routine in <a href="common/uhsf_fitspec.html">uhsf_fitspec.pro</a>', "uhsf_fitspec.pro", "    Jabran Zahid and David Rupke   ", "uhsf_fitspec", " This function is the core routine to fit the continuum and emission  lines of a spectrum.   The function requires an initialization structure with one required  and a bunch of optional tags. They are as follows: <span class= code-output >    fcninitpar: in, required, type=string</span> <span class= code-output >      Name of function for initializing continuum.</span> <span class= code-output >    argsaddpoly2temp: in, optional, type=structure</span> <span class= code-output >      Arguments for UHSF_ADDPOLY2TEMP call.</span> <span class= code-output >    argscontfit: in, optional, type=structure</span> <span class= code-output >      Arguments for continuum fit routine.</span> <span class= code-output >    argsinitpar: in, optional, type=structure</span> <span class= code-output >      Arguments for parameter initialization routine.</span> <span class= code-output >    argslinefit: in, optional, type=structure</span> <span class= code-output >      Arguments for line fitting routine</span> <span class= code-output >    argsoptstelz: in, optional, type=structure</span> <span class= code-output >      Arguments for stellar redshift optimization.</span> <span class= code-output >    fcncontfit: in, optional, type=string</span> <span class= code-output >      Name of continuum fitting function. If not specified,</span> <span class= code-output >      continuum is not fit.</span> <span class= code-output >    fcnlinefit: in, optional, type=string</span> <span class= code-output >      Name of line fitting function. Default: UHSF_MANYGAUSS</span> <span class= code-output >    fcnoptstelsig: in, optional, type=string</span> <span class= code-output >      Name of routine to optimize stellar dispersion.</span> <span class= code-output >    fcnoptstelz: in, optional, type=string</span> <span class= code-output >      Name of routine to optimize stellar redshift.</span> <span class= code-output >    fitran: in, optional, type=dblarr(2)</span> <span class= code-output >      Range of fitting, in observed frame. If not set, default is</span> <span class= code-output >      entire range of data / template intersection.</span> <span class= code-output >    loglam: in, optional, type=byte</span> <span class= code-output >      Set if data has constant log(lambda) dispersion.</span> <span class= code-output >    maskwidths: in, optional, type=dblarr(nlines*ncomp)</span> <span class= code-output >      Width, in km/s, of regions to mask from continuum fit. If not</span> <span class= code-output >      set, routine defaults to +/- 500 km/s. If parameter has one</span> <span class= code-output >      value, then this half-width is applied to all emission</span> <span class= code-output >      lines. If it has multiple values, it should have exactly the</span> <span class= code-output >      same number of elements as lines that are being fit.</span> <span class= code-output >    nomaskran: in, optional, type=dblarr(2)</span> <span class= code-output >      Wavelength region *not* to mask.</span> <span class= code-output >    peakinit: in, optional, type=dblarr(nlines,ncomp)</span> <span class= code-output >      Initial peak flux guesses.</span> <span class= code-output >    siginit_gas: in, optional, type=dblarr(nlines,ncomp)</span> <span class= code-output >      Initial line width guesses, in sigma and km/s.</span> <span class= code-output >    siginit_stars: in, optional, type=double</span> <span class= code-output >      Initial sigma value, in km/s, for a Gaussian kernel for</span> <span class= code-output >      convolving with stellar template. Convolution only performed</span> <span class= code-output >      if this param is set.</span> <span class= code-output >    sigfitvals: in, optional, type=dblarr</span> <span class= code-output >      If this param is set, routine cross-correlates data with</span> <span class= code-output >      continua convolved with each sigma value in this array, and</span> <span class= code-output >      chooses the sigma with the highest correlation coeff.</span> <span class= code-output >    startempfile: in, optional, type=structure</span> <span class= code-output >      File containing IDL save file (usually ending in .xdr) of</span> <span class= code-output >      stellar templates. Tags are lambda [type=dblarr(nwave)] and</span> <span class= code-output >      flux [type=dblarr(nwave,ntemplates)].</span> <span class= code-output >    dividecont: in, optional, type=byte</span> <span class= code-output >      Set this param to divide the data by the continuum</span> <span class= code-output >      fit. Default is to subtract.</span> <span class= code-output >    vacuum: in, optional, type=byte</span> <span class= code-output >      Set this param to shift stellar templates from air to</span> <span class= code-output >      vacuum wavelengths.</span>  ", "quiet      Use to prevent detailed output to screen. Default is to print       detailed output.   lambda      Spectrum, observed-frame wavelengths.  flux      Spectrum, fluxes.  err      Spectrum, flux errors.  z      Structure of initial guesses for redshifts. Only required tag       is STAR (in, type=double; redshift used to shift template to       observed frame).  linelist      Structure of rest wavelengths and labels for emission       lines. The tags of this structure are wave: in       [type=dblarr(nlines); line rest wavelengths] and label       [type=strarr(nlines); line names].  linewavez      Observed-frame expected wavelengths, one value for       each line and each velocity component.  linetie      Name of emission line to which each emission line is tied       (in redshift and linewidth).  ncomp      Number of components fit to each line.  initstr      Structure of initialization parameters.;   ", "UHSPECFIT", "    ChangeHistory: <span class= code-output > 2008oct22, HJZ, created</span> <span class= code-output > 2009may, DSNR, tweaked for LRIS data</span> <span class= code-output > 2009jun/jul, DSNR, rewritten</span> <span class= code-output > 2010jan28, DSNR, fitting now done in observed frame, not rest frame</span> <span class= code-output > 2010mar18, DSNR, added ct_coeff output to continuum fit</span> <span class= code-output > 2013sep, DSNR, complete re-write</span>      A structure that contains the fit and much else ...   ");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_anlspec.html", "uhsf_gm_anlspec.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_anlspec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_anlspec.html#uhsf_gm_anlspec", "uhsf_gm_anlspec", 'routine in <a href="gmos/uhsf_gm_anlspec.html">uhsf_gm_anlspec.pro</a>', "uhsf_gm_anlspec.pro", "    David Rupke   ", "uhsf_gm_anlspec", " This procedure is the core routine to plot the continuum and emission  lines fits to a spectrum.   As input, it requires a structure of initializaiton parameters. The  tags for this structure can be found in ...   ", "colsrowsfibersnoplotsskyverbose galbin ", "UHSPECFIT/GMOS", "    Change History: <span class= code-output > 2009may13, DSNR, created</span> <span class= code-output > 2013oct04, DSNR, started re-write for new data</span> <span class= code-output > 2013oct09, DSNR, documented</span>       IDL save file (.xdr)   ");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_fitcont_qso.html", "uhsf_gm_fitcont_qso.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_fitcont_qso.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_fitcont_qso.html#gmos_fit_qso_continuum", "gmos_fit_qso_continuum", 'routine in <a href="gmos/uhsf_gm_fitcont_qso.html">uhsf_gm_fitcont_qso.pro</a>', "uhsf_gm_fitcont_qso.pro", "", "gmos_fit_qso_continuum", "", "fitordqsotmpqsoordzexptermsno_dustquietlambdafluxweighttemplate_fluxindexct_coeff", "          -1", "");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_fitcont_qsofcn.html", "uhsf_gm_fitcont_qsofcn.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_fitcont_qsofcn.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_fitcont_qsofcn.html#gmos_qso_cnt_fcn", "gmos_qso_cnt_fcn", 'routine in <a href="gmos/uhsf_gm_fitcont_qsofcn.html">uhsf_gm_fitcont_qsofcn.pro</a>', "uhsf_gm_fitcont_qsofcn.pro", "", "gmos_qso_cnt_fcn", "", "fitordqsofluxqsoordqsoonlyexptermsxpymod", "          -1", "");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_fitnad.html", "uhsf_gm_fitnad.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_fitnad.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_fitnad.html#gmos_fit_nad", "gmos_fit_nad", 'routine in <a href="gmos/uhsf_gm_fitnad.html">uhsf_gm_fitnad.pro</a>', "uhsf_gm_fitnad.pro", "", "gmos_fit_nad", "", "sigfixtaumaxsigmaxgalbin", "          -1", "");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_fitspec.html", "uhsf_gm_fitspec.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_fitspec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_fitspec.html#uhsf_gm_fitspec", "uhsf_gm_fitspec", 'routine in <a href="gmos/uhsf_gm_fitspec.html">uhsf_gm_fitspec.pro</a>', "uhsf_gm_fitspec.pro", "    David Rupke   ", "uhsf_gm_fitspec", " This procedure is the core routine to fit the continuum and emission  lines of a spectrum.   As input, it requires a structure of initializaiton parameters. The  tags for this structure can be found in ...   ", "colsrowsfibersskyverbose galbin ", "UHSPECFIT/GMOS", "    Change History: <span class= code-output > 2009jul08, DSNR, copied from LRIS routine to GMOS</span> <span class= code-output > 2010may27, DSNR, started re-write for new data</span> <span class= code-output > 2013oct04, DSNR, started re-write for new data</span>       IDL save file (.xdr)   ");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_init_f05189.html", "uhsf_gm_init_f05189.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_init_f05189.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_init_f05189.html#uhsf_gm_init_f05189", "uhsf_gm_init_f05189", 'routine in <a href="gmos/uhsf_gm_init_f05189.html">uhsf_gm_init_f05189.pro</a>', "uhsf_gm_init_f05189.pro", "    David Rupke   ", "uhsf_gm_init_f05189", " This function initializes the fitting parameters.   ", "bin ", "UHSPECFIT/GMOS", "    Change History: <span class= code-output > 2013sep, DSNR, complete re-write</span>   A structure with the following required tags: <span class= code-output > fcninitpar: in, required, type=string</span> <span class= code-output >   Name of function for initializing continuum.</span> <span class= code-output > infile: in, required, type=string</span> <span class= code-output >   Filename of input data cube.</span> <span class= code-output > linetie: in, required, type=strarr(dx,dy,nlines)</span> <span class= code-output >   Name of emission line to which each emission line is tied</span> <span class= code-output >   (in redshift and linewidth).</span> <span class= code-output > ncomp: in, required, type=dblarr(ncols,nrows,nlines)</span> <span class= code-output >   For each spaxel and emission line, # of components to fit.</span> <span class= code-output > outdir: in, required, type=string</span> <span class= code-output >   Directory for output save (.xdr) file</span> <span class= code-output > zinit_stars: in, required, type=double</span> <span class= code-output >   Redshift used to shift any stellar templates to observed</span> <span class= code-output >   frame.</span> <span class= code-output > zinit_gas: in, required, type=dblarr(ncols,nrows,nlines,ncomp)</span> <span class= code-output >   Initial redshift guesses for each spaxel, emission line, and</span> <span class= code-output >   component.</span>  Also possibly included are the following optional tags: <span class= code-output > argsaddpoly2temp: in, optional, type=structure</span> <span class= code-output >   Arguments for UHSF_ADDPOLY2TEMP call.</span> <span class= code-output > argscontfit: in, optional, type=structure</span> <span class= code-output >   Arguments for continuum fit routine.</span> <span class= code-output > argsinitpar: in, optional, type=structure</span> <span class= code-output >   Arguments for parameter initialization routine.</span> <span class= code-output > argslinefit: in, optional, type=structure</span> <span class= code-output >   Arguments for line fitting routine</span> <span class= code-output > argslinelist: in, optional, type=structure</span> <span class= code-output >   Arguments for line selection routine</span> <span class= code-output > argsoptstelz: in, optional, type=structure</span> <span class= code-output >   Arguments for stellar redshift optimization.</span> <span class= code-output > argspltlin1: in, optional, type=structure</span> <span class= code-output >   Arguments for first line plot</span> <span class= code-output > argspltlin2: in, optional, type=structure</span> <span class= code-output >   Arguments for first line plot</span> <span class= code-output > dividecont: in, optional, type=byte</span> <span class= code-output >   Set this param to divide the data by the continuum</span> <span class= code-output >   fit. Default is to subtract.</span> <span class= code-output > fcncontfit: in, optional, type=string</span> <span class= code-output >   Name of continuum fitting function. If not specified,</span> <span class= code-output >   continuum is not fit.</span> <span class= code-output > fcnlinefit: in, optional, type=string</span> <span class= code-output >   Name of line fitting function. Default: UHSF_MANYGAUSS</span> <span class= code-output > fcnoptstelsig: in, optional, type=string</span> <span class= code-output >   Name of routine to optimize stellar dispersion.</span> <span class= code-output > fcnoptstelz: in, optional, type=string</span> <span class= code-output >   Name of routine to optimize stellar redshift. If not specified,</span> <span class= code-output >   redshift is not optimized.</span> <span class= code-output > fcnpltcont: in, optional, type=string</span> <span class= code-output >   Name of continuum plotting function. Default: UHSF_PLTCONT</span> <span class= code-output > fcnpltlin: in, optional, type=string</span> <span class= code-output >   Name of line plotting function. Default: UHSF_PLTLIN</span> <span class= code-output > fitran: in, optional, type=dblarr(2)</span> <span class= code-output >   Range of fitting, in observed frame. If not set, default is</span> <span class= code-output >   entire range of data / template intersection.</span> <span class= code-output > keepnad: in, optional, type=string</span> <span class= code-output >   Set to not remove NaD region from fit.</span> <span class= code-output > loglam: in, optional, type=byte</span> <span class= code-output >   Set if data has constant log(lambda) dispersion.</span> <span class= code-output > maskwidths: in, optional, type=dblarr</span> <span class= code-output >   Width, in km/s, of regions to mask from continuum fit. If not</span> <span class= code-output >   set, routine defaults to +/- 500 km/s. If parameter has one</span> <span class= code-output >   value, then this half-width is applied to all emission</span> <span class= code-output >   lines. If it has multiple values, it should have exactly the</span> <span class= code-output >   same number of elements as lines that are being fit.</span> <span class= code-output > nomaskran: in, optional, type=dblarr(2)</span> <span class= code-output >   Wavelength region *not* to mask.</span> <span class= code-output > outlines: in, optional, type=strarr</span> <span class= code-output >   Labels of emission lines for which to print line fluxes to output.</span> <span class= code-output > peakinit: in, optional, type=dblarr(nlines,ncomp)</span> <span class= code-output >   Initial peak flux guesses.</span> <span class= code-output > siginit_gas: in, optional, type=dblarr(nlines,ncomp)</span> <span class= code-output >   Initial line width guesses, in sigma and km/s.</span> <span class= code-output > siginit_stars: in, optional, type=double</span> <span class= code-output >   Initial sigma value, in km/s, for a Gaussian kernel for</span> <span class= code-output >   convolving with stellar template. Convolution only performed</span> <span class= code-output >   if this param is set.</span> <span class= code-output > sigfitvals: in, optional, type=dblarr</span> <span class= code-output >   If this param is set, routine cross-correlates data with</span> <span class= code-output >   continua convolved with each sigma value in this array, and</span> <span class= code-output >   chooses the sigma with the highest correlation coeff.</span> <span class= code-output > startempfile: in, optional, type=structure</span> <span class= code-output >   File containing IDL save file (usually ending in .xdr) of</span> <span class= code-output >   stellar templates. Tags:</span> <span class= code-output >     lambda: in, required, type=dblarr(nwave)</span> <span class= code-output >     flux: in, required, type=dblarr(nwave,ntemplates)</span> <span class= code-output > vacuum: in, optional, type=byte</span> <span class= code-output >   Set this param to shift stellar templates from air to</span> <span class= code-output >   vacuum wavelengths.</span>  ");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_init_f05189sky.html", "uhsf_gm_init_f05189sky.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_init_f05189sky.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_init_f05189sky.html#uhsf_gm_init_f05189", "uhsf_gm_init_f05189", 'routine in <a href="gmos/uhsf_gm_init_f05189sky.html">uhsf_gm_init_f05189sky.pro</a>', "uhsf_gm_init_f05189sky.pro", "    David Rupke   ", "uhsf_gm_init_f05189", " This procedure is the core routine to fit the continuum and emission  lines of a spectrum. The        fcninitpar: in, required, type=string         Name of function for initializing continuum.        fitran_rest: in, required, type=dblarr(2)         Range of fitting, in rest frame       infile: in, required, type=string         Filename of input data cube.       linetie: in, required, type=strarr(nlines)         Name of emission line to which each emission line is tied         (in redshift and linewidth).       ncomp: in, required, type=dblarr(ncols,nrows,nlines)         For each spaxel and emission line, # of components to fit.       outdir: in, required, type=string         Directory for output save (.xdr) file       zinit_stars: in, required, type=double         Redshift used to shift any stellar templates to observed         frame.       zinit_gas: in, required, type=dblarr(ncols,nrows,nlines,ncomp)         Initial redshift guesses for each spaxel, emission line, and         component.       startempfile: in, optional, type=structure         File containing IDL save file (usually ending in .xdr) of         stellar templates. Tags:           lambda: in, required, type=dblarr(nwave)           flux: in, required, type=dblarr(nwave,ntemplates)       argsaddpoly2temp: in, optional, type=structure         Arguments for UHSF_ADDPOLY2TEMP call.       argscontfit: in, optional, type=structure         Arguments for continuum fit routine.       argsinitpar: in, optional, type=structure         Arguments for parameter initialization routine.       argslinefit: in, optional, type=structure         Arguments for line fitting routine       argslinelist: in, optional, type=structure         Arguments for line selection routine       argsoptstelz: in, optional, type=structure         Arguments for stellar redshift optimization.       fcncontfit: in, optional, type=string         Name of continuum fitting function. If not specified,         continuum is not fit.       fcnlinefit: in, optional, type=string         Name of line fitting function. Default: UHSF_MANYGAUSS       fcnoptstelz: in, optional, type=string         Name of routine to optimize stellar redshift.       fitran: in, optional, type=dblarr(2)         Range of fitting, in observed frame. If not set, default is         entire range of data / template intersection.       keepnad: in, optional, type=string         Set to not remove NaD region from fit.       loglam: in, optional, type=byte         Set if data has constant log(lambda) dispersion.       masklines: in, optional, type=strarr         Lines to mask. If not set, all lines in the LINELIST         parameter are selected.       maskwidths: in, optional, type=dblarr         Width, in km/s, of regions to mask from continuum fit. If not         set, routine defaults to +/- 500 km/s. If parameter has one         value, then this half-width is applied to all emission         lines. If it has multiple values, it should have exactly the         same number of elements as lines that are being fit.       nomaskran: in, optional, type=dblarr(2)         Wavelength region *not* to mask.       peakinit: in, optional, type=dblarr(nlines,ncomp)         Initial peak flux guesses.       siginit_gas: in, optional, type=dblarr(nlines,ncomp)         Initial line width guesses, in sigma and km/s.       siginit_stars: in, optional, type=double         Initial sigma value, in km/s, for a Gaussian kernel for         convolving with stellar template. Convolution only performed         if this param is set.       sigfitvals: in, optional, type=dblarr         If this param is set, routine cross-correlates data with         continua convolved with each sigma value in this array, and         chooses the sigma with the highest correlation coeff.       dividecont: in, optional, type=byte         Set this param to divide the data by the continuum         fit. Default is to subtract.       vacuum: in, optional, type=byte         Set this param to shift stellar templates from air to         vacuum wavelengths.   ", "skygalbin", "UHSPECFIT", "    Change History: <span class= code-output > 2013sep, DSNR, complete re-write</span>      A structure that contains the fit and much else ...   ");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_initpar.html", "uhsf_gm_initpar.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_initpar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_initpar.html#uhsf_gm_initpar", "uhsf_gm_initpar", 'routine in <a href="gmos/uhsf_gm_initpar.html">uhsf_gm_initpar.pro</a>', "uhsf_gm_initpar.pro", "", "uhsf_gm_initpar", "", "siglimsigfixzfixlinenamelinelambdalinelambdazlinetieinitfluxinitsigncomp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_linelist.html", "uhsf_gm_linelist.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_linelist.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_linelist.html#uhsf_gm_linelist", "uhsf_gm_linelist", 'routine in <a href="gmos/uhsf_gm_linelist.html">uhsf_gm_linelist.pro</a>', "uhsf_gm_linelist.pro", "", "uhsf_gm_linelist", "", "addnadaddo1_5577twoslitfelines", "          -1", "");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_pltqso.html", "uhsf_gm_pltqso.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_pltqso.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_pltqso.html#gmos_plotqsofit", "gmos_plotqsofit", 'routine in <a href="gmos/uhsf_gm_pltqso.html">uhsf_gm_pltqso.pro</a>', "uhsf_gm_pltqso.pro", "", "gmos_plotqsofit", "", "pszbufqsocntargsinstroutfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("gmos/uhsf_gm_subqso.html", "uhsf_gm_subqso.pro", '.pro file in <a href="gmos/dir-overview.html">gmos/ directory</a>', "uhsf_gm_subqso.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("gmos/uhsf_gm_subqso.html#gmos_subtractqso", "gmos_subtractqso", 'routine in <a href="gmos/uhsf_gm_subqso.html">uhsf_gm_subqso.pro</a>', "uhsf_gm_subqso.pro", "", "gmos_subtractqso", "", "qsocntargsqsomodinstr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_interptemp.html", "uhsf_interptemp.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_interptemp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_interptemp.html#uhsf_interptemp", "uhsf_interptemp", 'routine in <a href="common/uhsf_interptemp.html">uhsf_interptemp.pro</a>', "uhsf_interptemp.pro", "    Jabran Zahid and David Rupke   ", "uhsf_interptemp", " Interpolate templates from template wavelength grid to data  wavelength grid.   ", "temp_lam_restspec_lam      Wavelengths of data arrays.  temp_lam      Wavelengths of template arrays.  template      Model fluxes from templates.   ", "UHSPECFIT", "    Change History: <span class= code-output > 2009, HJZ, created</span> <span class= code-output > 2013oct17, DSNR, documented</span>      The interpolated templates, of type dblarr(nwave_spec, ntemplates).   ");
  
  

libdata[libdataItem++] = new Array("common/uhsf_manygauss.html", "uhsf_manygauss.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_manygauss.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_manygauss.html#uhsf_manygauss", "uhsf_manygauss", 'routine in <a href="common/uhsf_manygauss.html">uhsf_manygauss.pro</a>', "uhsf_manygauss.pro", "", "uhsf_manygauss", "", "waveparam", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_manygauss_slow.html", "uhsf_manygauss_slow.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_manygauss_slow.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_manygauss_slow.html#uhsf_manygauss_slow", "uhsf_manygauss_slow", 'routine in <a href="common/uhsf_manygauss_slow.html">uhsf_manygauss_slow.pro</a>', "uhsf_manygauss_slow.pro", "", "uhsf_manygauss_slow", "", "velsigwaveparam", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_masklin.html", "uhsf_masklin.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_masklin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_masklin.html#uhsf_masklin", "uhsf_masklin", 'routine in <a href="common/uhsf_masklin.html">uhsf_masklin.pro</a>', "uhsf_masklin.pro", "    Jabran Zahid and David Rupke   ", "uhsf_masklin", " Remove data near emission lines.   ", "nomaskran      Set of lower and upper wavelength limits of regions *not* to       mask.   lambda      Wavelengths of spectrum  linelambda      Central wavelengths of lines to mask  halfwidth      Half width (in km/s) of masking region around each line   ", "          -1", "    ChangeHistory: <span class= code-output > 2008, HJZ, created</span> <span class= code-output > 2013oct, DSNR, added nomaskran keyword</span>      Array of lambda-array indices indicating non-masked wavelengths.   ");
  
  

libdata[libdataItem++] = new Array("common/uhsf_optstelsig.html", "uhsf_optstelsig.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_optstelsig.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_optstelsig.html#uhsf_optstelsig", "uhsf_optstelsig", 'routine in <a href="common/uhsf_optstelsig.html">uhsf_optstelsig.pro</a>', "uhsf_optstelsig.pro", "    David Rupke   ", "uhsf_optstelsig", " Find best-fit Gaussian sigma with which to convolve stellar templates.   ", "quiet lambda      Wavelengths.  flux      Flux of spectrum to fit.  weight      Weights of spectrum to fit.  ct_indx      Indices of input spectrum over which to perform fit.  ct_coeff      Coefficients of templates for best fit continuum.  template      Undispersed templates, with N pixels and M templates  sigfitvals      Sigma values to try for dispersion.  initstr      Structure input to UHSF_FITSPEC.   bestsigbestcontbesttemp", "UHSPECFIT", "    ChangeHistory: <span class= code-output > 2013oct09, DSNR, created</span>      bestsig: out, type=double       Best fit sigma.     bestcont: out, type=dblarr       Best fit continuum.     besttemp: out, typte=dblarr(N\,M)       Best fit convolved templates.   ");
  
  

libdata[libdataItem++] = new Array("common/uhsf_optstelz.html", "uhsf_optstelz.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_optstelz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_optstelz.html#uhsf_optstelz", "uhsf_optstelz", 'routine in <a href="common/uhsf_optstelz.html">uhsf_optstelz.pro</a>', "uhsf_optstelz.pro", "", "uhsf_optstelz", "", "lrangedzrangedzstepquietwavedatamodel", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_pltcont.html", "uhsf_pltcont.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_pltcont.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_pltcont.html#uhsf_pltcont", "uhsf_pltcont", 'routine in <a href="common/uhsf_pltcont.html">uhsf_pltcont.pro</a>', "uhsf_pltcont.pro", "    David Rupke   ", "uhsf_pltcont", " Plot continuum fit and output to JPG.   ", "ps      Set to get postscript, instead of default jpg, output.   instr      Contains results of fit.  outfile      Full path and name of output plot.   ", "UHSPECFIT", "    Change History: <span class= code-output > 2009, DSNR, created</span> <span class= code-output > 2013oct09, DSNR, documented</span>      None.   ");
  
  

libdata[libdataItem++] = new Array("common/uhsf_pltlin.html", "uhsf_pltlin.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_pltlin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_pltlin.html#uhsf_pltlin", "uhsf_pltlin", 'routine in <a href="common/uhsf_pltlin.html">uhsf_pltlin.pro</a>', "uhsf_pltlin.pro", "", "uhsf_pltlin", "", "velsiginstrpltparoutfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_pltnaddat.html", "uhsf_pltnaddat.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_pltnaddat.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_pltnaddat.html#uhsf_pltnaddat", "uhsf_pltnaddat", 'routine in <a href="common/uhsf_pltnaddat.html">uhsf_pltnaddat.pro</a>', "uhsf_pltnaddat.pro", "", "uhsf_pltnaddat", "", "psqsocntargsinstroutfilewavenormfluxnormparnorm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_pltnadfit.html", "uhsf_pltnadfit.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_pltnadfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_pltnadfit.html#uhsf_pltnadfit", "uhsf_pltnadfit", 'routine in <a href="common/uhsf_pltnadfit.html">uhsf_pltnadfit.pro</a>', "uhsf_pltnadfit.pro", "", "uhsf_pltnadfit", "", "oplotxranyranweqdatfileparfileoutfilez", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_pltskylin.html", "uhsf_pltskylin.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_pltskylin.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_pltskylin.html#uhsf_pltskylin", "uhsf_pltskylin", 'routine in <a href="common/uhsf_pltskylin.html">uhsf_pltskylin.pro</a>', "uhsf_pltskylin.pro", "", "uhsf_pltskylin", "", "pszbufcompplotilinesxranyranoutlinesargslinelistinstroutfile", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_printlinpar.html", "uhsf_printlinpar.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_printlinpar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_printlinpar.html#uhsf_printlinpar", "uhsf_printlinpar", 'routine in <a href="common/uhsf_printlinpar.html">uhsf_printlinpar.pro</a>', "uhsf_printlinpar.pro", "", "uhsf_printlinpar", "", "appendwhichlinesinitweqlinesfluxesfluxerrorsoutfilerowcol", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_printnadpar.html", "uhsf_printnadpar.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_printnadpar.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_printnadpar.html#uhsf_printnadpar", "uhsf_printnadpar", 'routine in <a href="common/uhsf_printnadpar.html">uhsf_printnadpar.pro</a>', "uhsf_printnadpar.pro", "", "uhsf_printnadpar", "", "galcolsrowsnabsfitdiroutfilegalz", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_printnadspec.html", "uhsf_printnadspec.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_printnadspec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_printnadspec.html#uhsf_printnadspec", "uhsf_printnadspec", 'routine in <a href="common/uhsf_printnadspec.html">uhsf_printnadspec.pro</a>', "uhsf_printnadspec.pro", "", "uhsf_printnadspec", "", "qsocntargsrestcompinstroutfilecfitordwaveoutfluxoutpolyparsweq", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_printweq.html", "uhsf_printweq.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_printweq.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_printweq.html#uhsf_printweq", "uhsf_printweq", 'routine in <a href="common/uhsf_printweq.html">uhsf_printweq.pro</a>', "uhsf_printweq.pro", "", "uhsf_printweq", "", "initinstroutfilerowcol", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_readnadfit.html", "uhsf_readnadfit.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_readnadfit.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_readnadfit.html#uhsf_readnadfit", "uhsf_readnadfit", 'routine in <a href="common/uhsf_readnadfit.html">uhsf_readnadfit.pro</a>', "uhsf_readnadfit.pro", "", "uhsf_readnadfit", "", "parfileabsparsemparsopars", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_refinestz.html", "uhsf_refinestz.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_refinestz.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_refinestz.html#uhsf_refinestz", "uhsf_refinestz", 'routine in <a href="common/uhsf_refinestz.html">uhsf_refinestz.pro</a>', "uhsf_refinestz.pro", "", "uhsf_refinestz", "", "sigmazinitwavefluxerr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_refinez.html", "uhsf_refinez.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_refinez.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_refinez.html#uhsf_refinez", "uhsf_refinez", 'routine in <a href="common/uhsf_refinez.html">uhsf_refinez.pro</a>', "uhsf_refinez.pro", "", "uhsf_refinez", "", "lrefsearchwidthzinitlambdaflux", "          -1", "");
  
  

libdata[libdataItem++] = new Array("common/uhsf_sepfitpars.html", "uhsf_sepfitpars.pro", '.pro file in <a href="common/dir-overview.html">common/ directory</a>', "uhsf_sepfitpars.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("common/uhsf_sepfitpars.html#uhsf_sepfitpars", "uhsf_sepfitpars", 'routine in <a href="common/uhsf_sepfitpars.html">uhsf_sepfitpars.pro</a>', "uhsf_sepfitpars.pro", "    David Rupke   ", "uhsf_sepfitpars", " Convert output of MPFIT, with best-fit line parameters in a single  array, into a structure with separate arrays for different line  parameters. Compute total line fluxes from the best-fit line  parameters.   ", "waveran      Set to upper and lower limits to return line parameters only       for lines within the given wavelength range. Lines outside this       range have fluxes set to 0.   param      Best-fit parameter array output by MPFIT.  perror      Errors in best fit parameters, output by MPFIT.   ", "UHSPECFIT", "    ChangeHistory: <span class= code-output > 2009may26, DSNR, created</span> <span class= code-output > 2009jun07, DSNR, added error propagation and rewrote</span> <span class= code-output > 2013nov01, DSNR, added documentation</span>      A structure with separate arrays for different line     parameters. Each array has NxM elements, where N is the number of     emission lines fit and M is the number of velocity     components. Tags: flux, fluxerr, fluxpk, fluxpkerr, wave, and     sigma.   ");
  
  

libdata[libdataItem++] = new Array("./zfit_jfuchs.html", "zfit_jfuchs.pro", '.pro file in <a href="./dir-overview.html">./ directory</a>', "zfit_jfuchs.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("./zfit_jfuchs.html#zfit", "zfit", 'routine in <a href="./zfit_jfuchs.html">zfit_jfuchs.pro</a>', "zfit_jfuchs.pro", "", "zfit", "", "file", "          -1", "");
  
  

